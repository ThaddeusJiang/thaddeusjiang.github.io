<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   <title>ThaddeusJiang</title>
   <link>https://thaddeusjiang.com</link>
   <description>数字花园</description><follow_challenge>
    <feedId>41718658305983488</feedId>
    <userId>41718122139849728</userId>
</follow_challenge>
   <item>
      <title>2025-05-23 何为领先多少年，何为落后多少年</title>
      <link>https://thaddeusjiang.com/2025-05-23-he-wei-ling-xian-duo-shao-nian-he-wei-luo-hou-duo-shao-nian</link>
			<description><![CDATA[
<div class="content">
  <p>在互联网上总是看到“xxx 领先 yyy 多少年”或者“落后多少年”，这样的人基本上都是标题党。没有任何事实依据就随便喊出一个数字已经成为想要流量的网友们的日常，在 “注意力经济时代” 信口开河的人或许才是时代的弄潮儿。</p><h2 class="">那么，何为领先多少年，何为落后多少年？</h2><p>📌 领先多少年</p><p>指某个对象在某一方面的发展水平相当于另一个对象在未来若干年后才能达到的水平。</p><p>✅ 例子：如果某国的AI技术在2025年就达到了另一国预计2030年才能达到的水平，我们就可以说前者领先后者5年。</p><p>📌 落后多少年</p><p>指某个对象当前的发展水平相当于另一个对象过去若干年前的状态。</p><p>✅ 例子：若某企业的产品设计还停留在2015年的风格，而行业领先者已发展到2025年的趋势，可以说该企业落后行业10年。</p><h2 class="">如何判断网友在信口开河？</h2><p>标题党都有一个特征就是只喊口号但不提供具体数据，只需要查询一下对比双方实现某种状态的具体时间就可以了。</p><p>📍案例 1：「中国高铁领先世界10年」</p><table><tbody><tr class="evenRow"><td align="center">时间点</td><td align="center">国家</td><td align="center">事件描述</td></tr><tr class="oddRow"><td align="center">1964年</td><td align="center">日本</td><td align="center">新干线通车，世界第一条高铁</td></tr><tr class="evenRow"><td align="center">1981年</td><td align="center">法国</td><td align="center">TGV投入运营</td></tr><tr class="oddRow"><td align="center">1991年</td><td align="center">德国</td><td align="center">ICE高铁投入运营</td></tr><tr class="evenRow"><td align="center">2008年</td><td align="center">中国</td><td align="center">京津城际通车，中国第一条高速铁路（非试验段）</td></tr><tr class="oddRow"><td align="center">2023年</td><td align="center">中国</td><td align="center">高铁营运里程突破4万公里，全球第一</td></tr></tbody></table><p>中国的高铁起步时间比日法德晚近40年，根本不可能“领先10年”。</p><p>如果标题党想以“2023年，中国高铁营运里程突破4万公里，全球第一”为准证明中国高铁领先世界，如何验证？</p><p>“领先多少年”逻辑的根本漏洞之一：如果对比方根本不追求、不可能达到同一目标，那么就无法定义“领先或落后多少年”，因为根本不在同一赛道。</p><p>Ask ChatGPT</p><p><a class="tc-tiddlylink-external" href="https://chatgpt.com/share/682fd5b5-c614-8012-a45e-496cb6ce771a" rel="noopener noreferrer" target="_blank">https://chatgpt.com/share/682fd5b5-c614-8012-a45e-496cb6ce771a</a></p>
</div>


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>



]]></description>
      <pubDate>Fri, 23 May 2025 1:17:43 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2025-05-23-he-wei-ling-xian-duo-shao-nian-he-wei-luo-hou-duo-shao-nian</guid>      
   </item>

   <item>
      <title>2025-04-04 形式主义的敏捷开发</title>
      <link>https://thaddeusjiang.com/2025-04-04-xing-shi-zhu-yi-de-min-jie-kai-fa</link>
			<description><![CDATA[
<div class="content">
  <p>越来越多的团队开始说自己采用了敏捷开发，但是从我和他们一起工作的实际体验来说，我觉得大部分团队只是“形式主义的敏捷开发”。
虽然他们或许知道很多概念，如 Agile, Waterfall, Scrum, Sprint 等，但是实际的工作中除了会议和使用的工具变多了，其他方面似乎没有什么变化。</p><h2 class="">我理解的敏捷开发</h2><ul><li>优先构建可工作的软件，而不是开会。</li><li>和客户一起推动产品开发，而不仅仅是频繁发布。</li><li>快速交付有价值的软件，而不是仅仅是快速 fix bugs。</li></ul><h2 class="">我观察到的 bad things</h2><p>1. 开会，开会，还是开会。</p><p>形式主义的敏捷开发团队最喜欢的就是开会，非技术官僚最喜欢开发。我认为频繁开会效率太低，每天都开早会是非常形式主义的行为。</p><p>Scrum 作为被广泛采用的 Agile 形式，最大的问题就是新增了太多管理工作，Sprint Plan meeting, Daily meeting, Sprint Review meeting 等等，严重占用时间和精力，经济性极低。</p><p>2. one week sprint</p><p>一周长度的 sprint 太短了，再加上形式主义的敏捷开发团队喜欢开会，留给开发者的时间太少了。
sprint 太短还有很多问题，</p><p>❌ 时间过短，难以完成较复杂的任务：如果功能涉及多个团队（前端、后端、DevOps），一周可能不够。</p><p>❌ 频繁回顾 &amp; 规划，管理成本高：每周都要进行回顾和规划会议，可能占用较多时间。</p><p>❌ 开发压力大，容易影响质量：开发节奏过快，可能导致测试不足或代码质量下降。</p><p>3. 只关注 bugs，不关注 needs</p><p>很多公司有专门的产品经理职位，但是很多产品经理并不了解客户需求；也没有及时跟踪客户需求变化；或者对客户言听计从没有深度思考。团队只关注紧急事项，忽略重要事项，只关注 bugs 修复情况和新功能开发进度，没有认真思考过客户想要什么。</p><p>越来越多的团队采用 Release train，理论上可以快速发布一些新功能（features）。但是实际工作中频繁的发布让很多团队只能关注对客户造成的不好的影响（bugs），而没有时间和精力去了解客户的真实需求（needs）。</p><p>以上就是我观察到的“形式主义的敏捷开发”，不知道你是否相同的经历和体验呢？欢迎一起交流。</p><p>结尾，感谢你阅读这篇文章。</p><p>Refs:</p><ul><li>敏捷软件开发宣言 <a class="tc-tiddlylink-external" href="https://agilemanifesto.org/iso/zhchs/manifesto.html" rel="noopener noreferrer" target="_blank">https://agilemanifesto.org/iso/zhchs/manifesto.html</a></li></ul>
</div>


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>



]]></description>
      <pubDate>Thu, 3 April 2025 21:9:22 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2025-04-04-xing-shi-zhu-yi-de-min-jie-kai-fa</guid>      
   </item>

   <item>
      <title>2025-03-31 UI Development something</title>
      <link>https://thaddeusjiang.com/2025-03-31-ui-development-something</link>
			<description><![CDATA[
<div class="content">
  <p>2025 我个人关注的 UI 领域的内容：</p><ol><li>Server-Client two-way functions call</li><li>Data sync</li><li>JavaScript Signals</li></ol><h2 class="">1. Server 要求 Clients 响应不应该被忽视</h2><p>目前为止，大多数 Web 应用都是 server 被动的等待 client 发送请求，是客户端主动的。
服务器端主动发送请求要求 client-side 响应也是很常见的需求，不应该被忽视。</p><p>服务器端控制 UI 更新也不是新技术，在网络游戏领域是十分常见的技术。可惜，目前主流的 JavaScript Web frameworks 几乎都没有内置这个功能，有点遗憾。</p><p>目前 JS 生态中主流的方案是：使用 socket.io 或者 ws 实现客户端-服务器的双向的通信。</p><h2 class="">2. 更简单的数据流</h2><p>目前为止，大多数 Web 应用还是使用 Data fetching 来获取数据，是 request-response 模式。</p><p>Data sync 提供了一种新思路，即：Sync 模式。client-side 不再根据需求分别请求数据，而是统一下载数据。Data sync 让数据流变得更简答。</p><p><img class=" tc-image-loading" src="https://i.gyazo.com/a49172152d9223b9e54d4213073fc8fe.png" width="50%"></p><p>Data sync 可能不适合基于内容的资讯网站，但是非常适合有明确数据范围的应用，例如：任务管理应用、网络聊天应用、绘图应用等等。</p><h2 class="">3. React is not Reactive</h2><p>目前 web frontend 主流的框架是 React，React 的行为模式是基于 diff 的。</p><p>React 中当数据发生变化，React 会重新执行 components 并计算 diff，然后更新需要被更新的 DOM。</p><p>虽然 React 有优秀的 diff 算法可以高效的更新 DOM，但是 diff 从原理上就没有 Signals 高效。我认为是时候改变了。</p>
</div>


<div class="copyright">
<strong>
<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">
版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）
</a>
</strong>
</div>

<style>
.copyright {
  padding: 0.5rem 1rem;
  text-align: center;
}

.copyright:hover {
  opacity: 0.9;
}
</style>



]]></description>
      <pubDate>Mon, 31 March 2025 8:10:30 -00:00</pubDate>
			<guid>https://thaddeusjiang.com/2025-03-31-ui-development-something</guid>      
   </item>

</channel>
</rss>
